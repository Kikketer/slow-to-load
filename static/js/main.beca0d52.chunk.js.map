{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","microapp","MicroApp","id","audience","state","feedback","showDetail","bind","assertThisInitialized","hideDetail","getToken","_this2","setTimeout","initialize","setState","url","concat","window","location","origin","pathname","title","token","length","react_default","a","createElement","className","onClick","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8UAgFeA,cA3Eb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,SAAW,IAAIC,IAAS,CAC3BC,GAAI,wBACJC,SAAU,iBAGZV,EAAKW,MAAQ,CACXC,SAAU,IAGZZ,EAAKa,WAAab,EAAKa,WAAWC,KAAhBb,OAAAc,EAAA,EAAAd,CAAAD,IAClBA,EAAKgB,WAAahB,EAAKgB,WAAWF,KAAhBb,OAAAc,EAAA,EAAAd,CAAAD,IAClBA,EAAKiB,SAAWjB,EAAKiB,SAASH,KAAdb,OAAAc,EAAA,EAAAd,CAAAD,IAdJA,mFAiBM,IAAAkB,EAAAf,KAGlBgB,WAAW,WACTD,EAAKX,SAASa,aAEdF,EAAKG,SAAS,CACZT,SAAU,iBAEX,2CASHT,KAAKI,SAASM,WAAW,CAAES,IAAG,GAAAC,OAAKC,OAAOC,SAASC,QAArBH,OAA8BC,OAAOC,SAASE,UAAYC,MAAO,gBAE/FzB,KAAKkB,SAAS,CACZT,SAAU,0DAKZT,KAAKI,SAASS,aACdb,KAAKkB,SAAS,CACZT,SAAU,0KAKZT,KAAKkB,SAAS,CACZT,SAAU,iCAEQT,KAAKI,SAASU,kBAA5BY,SACN1B,KAAKkB,SAAS,CACZT,SAAQ,aAAAW,OAAeM,EAAMC,6IAIxB,IACClB,EAAaT,KAAKQ,MAAlBC,SACR,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,6FACAF,EAAAC,EAAAC,cAAA,WAAMrB,GACNmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQE,QAAShC,KAAKU,YAAtB,eACAkB,EAAAC,EAAAC,cAAA,UAAQE,QAAShC,KAAKa,YAAtB,eACAe,EAAAC,EAAAC,cAAA,UAAQE,QAAShC,KAAKc,UAAtB,sBArEQmB,aCQEC,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCPNC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.beca0d52.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport MicroApp from '@workgrid/micro-app'\n\nclass App extends Component {\n  constructor() {\n    super()\n    // Create a new instance of a MicroApp\n    this.microapp = new MicroApp({\n      id: 'slow-to-load-microapp',\n      audience: 'slow-to-load'\n    })\n\n    this.state = {\n      feedback: ''\n    }\n\n    this.showDetail = this.showDetail.bind(this)\n    this.hideDetail = this.hideDetail.bind(this)\n    this.getToken = this.getToken.bind(this)\n  }\n\n  componentDidMount() {\n    // As soon as possible and once, tell Workgrid that you are ready\n    // I put it in the did mount since that means we are ready to roll\n    setTimeout(() => {\n      this.microapp.initialize()\n\n      this.setState({\n        feedback: 'Initialized'\n      })\n    }, 25000)\n  }\n\n  showDetail() {\n    // Show detail by calling the .showDetail() on the microapp\n    // The URL should be another microapp ready webpage, showing\n    // standard webpages is not supported at this time\n\n    // In this example I'm just showing summary again\n    this.microapp.showDetail({ url: `${window.location.origin}${window.location.pathname}`, title: 'Slow Detail' })\n\n    this.setState({\n      feedback: 'Show Detail Sent'\n    })\n  }\n\n  hideDetail() {\n    this.microapp.hideDetail()\n    this.setState({\n      feedback: 'Detail hidden'\n    })\n  }\n\n  async getToken() {\n    this.setState({\n      feedback: 'Asking for Token...'\n    })\n    const token = await this.microapp.getToken()\n    this.setState({\n      feedback: `Got Token ${token.length}`\n    })\n  }\n\n  render() {\n    const { feedback } = this.state\n    return (\n      <div className=\"App\">\n        <p>This app takes an incredible amount of time to load. Do not do this in real life</p>\n        <pre>{feedback}</pre>\n        <div className=\"ActionBar\">\n          <button onClick={this.showDetail}>Show Detail</button>\n          <button onClick={this.hideDetail}>Hide Detail</button>\n          <button onClick={this.getToken}>Get Token</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Polyfills for IE11 needed for the Micro App SDK\nimport 'core-js/es6/promise'\nimport 'core-js/fn/object/assign'\nimport 'core-js/fn/array/includes'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}